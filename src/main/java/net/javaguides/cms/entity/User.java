package net.javaguides.cms.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import java.util.Set;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents an abstract user entity in the system.
 * This class is a part of the Client Management System (CMS) package defined for managing user data.
 * It is mapped to the "users" table in the database with an inheritance strategy of type JOINED,
 * which is suitable for subclassing this entity in the database.
 *
 * <p>This entity includes basic user details such as name, username, email, and password.
 * It is designed to be extended by other user-specific entities that may require additional fields or behavior.
 *
 * <p>Relationships:
 * <ul>
 *   <li>Many-to-many relationship with {@link Role} entity: A user can possess multiple unique roles.
 * </ul>
 *
 * <p>Database interactions are managed by Jakarta Persistence API, with features like:
 * <ul>
 *   <li>Automatic generation of IDs.
 *   <li>Enforcement of non-null constraints on username, email, and password.
 *   <li>Enforcement of uniqueness on username and email to prevent duplicates.
 *   <li>Eager fetching of roles associated with the user, ensuring that roles are loaded at the same time as the user entity.
 *   <li>Cascading all persistence operations to the associated roles.
 * </ul>
 *
 * @author Annotated with Lombok annotations for boilerplate getter and setter methods, as well as constructors.
 * @see jakarta.persistence
 * @see lombok
 */
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@Table(name = "users")
public abstract class User {

  /**
   * Unique identifier for the User. This ID is generated by the database using an identity strategy.
   */
  @Id
  @GeneratedValue (strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "first_name", nullable = false)
  private String firstName;
  @Column(name = "last_name", nullable = false)
  private String lastName;
  /**
   * The username of the user. It must be unique and not null.
   */
  @Column(name = "username", nullable = false, unique = true)
  private String username;
  /**
   * The email of the user. It must be unique and not null.
   */
  @Column(nullable = false, unique = true)
  @Email
  private String email;

  /**
   * The password for the user account. It is stored in a non-null field in the database.
   */
  @Column(nullable = false)
  private String password;

  /**
   * Set of roles associated with the user. Defined as a many-to-many relationship.
   * Changes to the user entity (such as save, update, delete) will cascade to the roles.
   * This field is fetched eagerly, which means it is loaded at the same time as the user.
   */
  @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
  @JoinTable(name = "users_roles",
      //users - primary key becomes foreign key in user_roles table
      joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),
      inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "id", table = "Role")
  )
  private Set<Role> roles;
}
